{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "/home/flow/jzr/interlap/src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nbadge                     = 'InterLap'\nrpr                       = CND.rpr\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nhex                       = ( n ) -> ( n.toString 16 ).toUpperCase().padStart 4, '0'\nDRange                    = require 'drange'\n#...........................................................................................................\n@types                    = new ( require 'intertype' ).Intertype()\n{ isa\n  validate\n  declare\n  cast\n  type_of }               = @types.export()\nLFT                       = require 'letsfreezethat'\n# { lets\n#   freeze }                = LFT\nfreeze                    = Object.freeze\nMultimix                  = require 'multimix'\nMAIN                      = @\n\n\n#===========================================================================================================\n# TYPES\n#-----------------------------------------------------------------------------------------------------------\ndeclare 'interlap',\n  tests:\n    \"must be instanceof Interlap\": ( x ) -> x instanceof Interlap\n  casts:\n    list: ( x ) -> MAIN.as_list x\n\n#-----------------------------------------------------------------------------------------------------------\ndeclare 'segment',\n  tests:\n    \"must be instanceof Segment\": ( x ) -> x instanceof Segment\n  casts:\n    list: ( x ) -> MAIN.as_list x\n\n#-----------------------------------------------------------------------------------------------------------\ndeclare 'interlap_interlap_as_list', tests:\n  \"must be a list\":                                   ( x ) -> @isa.list x\n  \"each element must be an interlap_segment_as_list\": ( x ) -> x.every ( y ) => @isa.interlap_segment_as_list y\n\n#-----------------------------------------------------------------------------------------------------------\ndeclare 'interlap_segment_as_list', tests:\n  \"must be a list\":                                         ( x ) -> @isa.list x\n  \"length must be 2\":                                       ( x ) -> x.length is 2\n  \"lo boundary must be an infnumber\":                       ( x ) -> isa.infnumber x[ 0 ]\n  \"hi boundary must be an infnumber\":                       ( x ) -> isa.infnumber x[ 1 ]\n  \"lo boundary must be less than or equal to hi boundary\":  ( x ) -> x[ 0 ] <= x[ 1 ]\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass Segment extends Array\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( lohi ) ->\n    validate.interlap_segment_as_list lohi if lohi\n    super lohi[ 0 ], lohi[ 1 ]\n    Object.defineProperty @, 'size',  get: @_size_of\n    Object.defineProperty @, 'lo',    get: -> @[ 0 ]\n    Object.defineProperty @, 'hi',    get: -> @[ 1 ]\n    return freeze @\n\n  #---------------------------------------------------------------------------------------------------------\n  _size_of:           -> @[ 1 ] - @[ 0 ] + 1\n  # @from:    ( P...  ) -> new Segment P...\n  @from:  -> throw new Error \"^778^ `Segment.from()` is not implemented\"\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass Interlap  extends Array\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( segments ) ->\n    super()\n    Object.defineProperty @, 'size',    get: @_size_of\n    Object.defineProperty @, 'lo',      get: -> @first?[ 0      ] ? null\n    Object.defineProperty @, 'hi',      get: -> @last?[  1      ] ? null\n    Object.defineProperty @, 'first',   get: -> @[ 0            ] ? null\n    Object.defineProperty @, 'last',    get: -> @[ @length - 1  ] ? null\n    Object.defineProperty @, '_drange', get: -> drange\n    #.......................................................................................................\n    switch arity = arguments.length\n      when 0\n        drange = new DRange()\n      when 1\n        if segments instanceof DRange\n          drange    = segments\n        else if segments instanceof Interlap\n          drange    = segments._drange\n        else if segments instanceof Segment\n          drange    = new DRange()\n          drange.add segments...\n        else if Array.isArray segments\n          drange    = new DRange()\n          segments  = [ segments[ 0 ]..., ] if segments.length is 1 and isa.generator segments[ 0 ]\n          for segment in segments\n            validate.interlap_segment_as_list segment unless segment instanceof Segment\n            drange.add segment...\n        else throw new Error \"^445^ unable to instantiate from a #{type_of segments} (#{rpr segments})\"\n      else throw new Error \"^443^ expected 1 argument, got #{arity}\"\n    #.......................................................................................................\n    MAIN._apply_segments_from_drange @, drange\n    return freeze @\n\n  #---------------------------------------------------------------------------------------------------------\n  _size_of:           -> @reduce ( ( sum, segment ) -> sum + segment.size ), 0\n  @from:  -> throw new Error \"^776^ `Interlap.from()` is not implemented\"\n  # @from:  -> ( P...  ) -> MAIN.interlap_from_segments P...\n  # @from:    ( P...  ) -> new Interlap P...\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@segment_from_lohi      = ( lo, hi      ) -> new Segment if hi? then [ lo, hi, ] else [ lo, ]\n@interlap_from_segments = ( segments... ) -> new Interlap segments\n\n#-----------------------------------------------------------------------------------------------------------\n@as_list = ( me ) ->\n  switch ( type = type_of me )\n    when 'segment'  then return [ me..., ]\n    when 'interlap' then return ( [ s..., ] for s in me )\n  throw new Error \"^3445^ expected a segment or an interlap, got a #{type}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@as_numbers = ( me ) ->\n  switch ( type = type_of me )\n    when 'segment'  then return [ me.lo .. me.hi ]\n    when 'interlap' then return ( [ s.lo .. s.hi ] for s in me ).flat 1\n  throw new Error \"^3447^ expected a segment or an interlap, got a #{type}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@includes = ( me, other ) ->\n  me      = new Interlap me unless me instanceof Interlap\n  switch type = type_of other\n    when 'float'    then return @_includes_float    me, other\n    when 'segment'  then return @_includes_segment  me, other\n    else throw new Error \"^783^ expected a number, got a #{type}\"\n  return false\n\n#-----------------------------------------------------------------------------------------------------------\n@_includes_float = ( me, other ) ->\n  ### TAINT can stop iteration as soon as s.lo > other ###\n  return me.some ( s ) -> s.lo <= other <= s.hi\n\n#-----------------------------------------------------------------------------------------------------------\n@_includes_segment = ( me, other ) ->\n  ### TAINT can stop iteration as soon as s.lo > other ###\n  return me.some ( s ) -> ( s.lo <= other.lo <= s.hi ) and ( s.lo <= other.hi <= s.hi )\n\n#-----------------------------------------------------------------------------------------------------------\n@union = ( me, others... ) ->\n  me      = new Interlap me unless me instanceof Interlap\n  drange  = me._drange\n  for other in others\n    if other instanceof Interlap\n      drange = drange.add segment... for segment in other\n    else\n      other   = new Segment other unless other instanceof Segment\n      drange  = drange.add other...\n  return new Interlap drange\n\n#-----------------------------------------------------------------------------------------------------------\n@difference = ( me, others... ) ->\n  me      = new Interlap me unless me instanceof Interlap\n  drange  = me._drange\n  for other in others\n    if other instanceof Interlap\n      drange = drange.subtract segment... for segment in other\n    else\n      other   = new Segment other unless other instanceof Segment\n      drange  = drange.subtract other...\n  return new Interlap drange\n\n# #-----------------------------------------------------------------------------------------------------------\n# @_drange_as_interlap  = ( drange ) ->\n#   return freeze @_sort Interlap.from ( ( new Segment [ r.low, r.high, ] ) for r in drange.ranges )\n\n#-----------------------------------------------------------------------------------------------------------\n@_sort = ( interlap ) -> interlap.sort ( a, b ) ->\n  ### NOTE correct but only the first two terms are ever needed ###\n  return -1 if a[ 0 ] < b[ 0 ]\n  return +1 if a[ 0 ] > b[ 0 ]\n  ### could raise an internal error if we get here since the above two comparsions must always suffice ###\n  return -1 if a[ 1 ] < b[ 1 ]\n  return +1 if a[ 1 ] > b[ 1 ]\n  return  0\n\n#-----------------------------------------------------------------------------------------------------------\n@_apply_segments_from_drange = ( me, drange ) ->\n  segments = MAIN._sort ( ( new Segment [ r.low, r.high, ] ) for r in drange.ranges )\n  me.push segment for segment in segments ### TAINT use `splice()` ###\n  return me\n\n\n############################################################################################################\n@Interlap   = Interlap\n@Segment    = Segment\n\n### TAINT consider to use less conflicting name ###\nclass InterLapLib extends Multimix\n  @include MAIN, { overwrite: false, }\n\nmodule.exports = INTERLAP = new InterLapLib()\n\n\n\n"
  ]
}